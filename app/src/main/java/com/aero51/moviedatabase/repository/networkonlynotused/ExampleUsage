
public class Top_Rated_Results_Repository {


    //creating livedata for PagedList  and networkState
    private LiveData<PagedList<Top_Rated_Result>> topRatedResultsPagedList;
    private LiveData<NetworkState> networkState;


 //getting our data source factory
        TopRatedResultDataSourceFactory topRatedResultDataSourceFactory = new TopRatedResultDataSourceFactory();

        networkState = Transformations.switchMap(topRatedResultDataSourceFactory.getNetworkStatus(),
                new Function<TopRatedResultDataSource, LiveData<NetworkState>>() {
                    @Override
                    public LiveData<NetworkState> apply(TopRatedResultDataSource dataSource) {
                        return dataSource.getNetworkState();
                    }
                });


                 //Getting PagedList config
                        PagedList.Config pagedListConfig =
                                (new PagedList.Config.Builder())
                                        .setEnablePlaceholders(false)
                                        .setPrefetchDistance(60)
                                        .setPageSize(TopRatedResultDataSource.PAGE_SIZE).build();
                        //Building the paged list
                        topRatedResultsPagedList = (new LivePagedListBuilder(
                                topRatedResultDataSourceFactory, pagedListConfig))
                                .setBoundaryCallback(boundaryCallback)
                                .build();



                                }

           // this is here because i wanted to keep a record how to use retrofit sync call
        private List<Top_Rated_Result> fetchTopRatedMoviesSync(Call<Top_Rated_Movies_Page> call) {
               List<Top_Rated_Result> list_of_results = new ArrayList<>();
               try {
                   Response<Top_Rated_Movies_Page> response = call.execute();
                   if (!response.isSuccessful()) {
                       Log.d("moviedatabaselog", "Response unsuccesful: " + response.code());
                       // networkState.postValue(new NetworkState(NetworkState.Status.FAILED, response.message()));
                       return null;
                   }
                   // networkState.postValue(NetworkState.LOADED);
                   Top_Rated_Movies_Page mTopRatedMovies = response.body();
                   list_of_results = mTopRatedMovies.getResults_list();
               } catch (IOException e) {
                   e.printStackTrace();
                   Log.d("moviedatabaselog", "call failure  IOException : " + e.getMessage());
                   // networkState.postValue(new NetworkState(NetworkState.Status.FAILED, e.getMessage()));
               }
               return list_of_results;

           }


Im implementing Paged List. have some unboxing issues probably.

areItemsTheSame method gets called 237 times when the list changes from 20 to 40.
If the initial list size was 20 and new list size 40, shouldnt diffing be made for only first 20 items in the new list?



My diff callback inside paged list adapter:

    private static DiffUtil.ItemCallback<Top_Rated_Result> DIFF_CALLBACK =
            new DiffUtil.ItemCallback<Top_Rated_Result>() {
                @Override
                public boolean areItemsTheSame(Top_Rated_Result oldItem, Top_Rated_Result newItem) {
                    int a = oldItem.getId();
                    int b = newItem.getId();
                    boolean c = (a == b);
                    Log.d("moviedatabaselog", c + " ,oldid: " + a + " ,newid: " + b);
                    return c;
                }
                @Override
                public boolean areContentsTheSame(Top_Rated_Result oldItem, Top_Rated_Result newItem) {
                    Log.d("moviedatabaselog", "areContentsTheSame: oldItem Title: " + oldItem.getTitle() + " ,newItem Title: " + newItem.getTitle());
                    return oldItem.getTitle().equals(newItem.getTitle());
                }
            };

 `oldItem.getId()` returns Integer.Im just learning about unboxing so tried it like above.





stack overflow answer  :
Paging2 has been superseded by Paging3 (though just launched alpha01), here is the Paging3 sample which solves this use-case: https://github.com/android/architecture-components-samples/blob/master/PagingWithNetworkSample/app/src/main/java/com/android/example/paging/pagingwithnetwork/reddit/repository/inDb/PageKeyedRemoteMediator.kt

Through BoundaryCallback you can just read / write your next page key to db directly since i guess thats the only place where you need it.

So in your onItemAtEndLoad() implementation there should be something like:

RemoteKey remoteKey = db.runInTransaction(() -> {
dao.nextRemoteKey();
});


NetworkResponse response = networkApi.fetchNextPage(remoteKey);

db.runInTransaction(() -> {
dao.clearKey(); // Remove previous key
dao.insertKey(response.nextPageKey); // Insert new key
dao.insertAll(response.data); // Update DataSource + invalidate()
});
I copied it from response to my question here




//method to directly fetch page number from db but get cannot acess database on main thread error

  public void fetchTopRatedMoviesNew() {
        Top_Rated_Movies_Page movies_page = database.runInTransaction(new Callable<Top_Rated_Movies_Page>() {
            @Override
            public Top_Rated_Movies_Page call() throws Exception {
                Top_Rated_Movies_Page page = dao.getMoviePage();
                if (page != null) {
                    return page;
                } else {
                    Log.d("moviedatabaselog", "dao movie page null");
                    return null;
                }
            }
        });
        Integer page_number;
        if (movies_page == null) {
            page_number = TOP_RATED_MOVIES_FIRST_PAGE;
        } else {
            page_number = movies_page.getPage();
        }

        TheMovieDbApi theMovieDbApi = RetrofitInstance.getApiService();
        Call<Top_Rated_Movies_Page> call = theMovieDbApi.getTopRatedMovies(API_KEY, page_number);
        call.enqueue(new Callback<Top_Rated_Movies_Page>() {
            @Override
            public void onResponse(Call<Top_Rated_Movies_Page> call, Response<Top_Rated_Movies_Page> response) {
                if (!response.isSuccessful()) {
                    Log.d("moviedatabaselog", "Response unsuccesful: " + response.code());
                    return;
                }
                Log.d("moviedatabaselog", "Response ok: " + response.code());
                Top_Rated_Movies_Page mTopRatedMovies = response.body();
                database.runInTransaction(new Runnable() {
                    @Override
                    public void run() {
                        dao.deleteAllMoviePages();
                        dao.insertMoviePage(mTopRatedMovies);
                        dao.insertList(mTopRatedMovies.getResults_list());
                    }
                });
            }

            @Override
            public void onFailure(Call<Top_Rated_Movies_Page> call, Throwable t) {
                Log.d("moviedatabaselog", "onFailure: " + t.getMessage());
            }
        });
    }



    // for swiping
            new ItemTouchHelper(new ItemTouchHelper.SimpleCallback(0,
                    ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT) {
                @Override
                public boolean onMove(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder, @NonNull RecyclerView.ViewHolder target) {
                   Toast.makeText(view.getContext(), "onMove", Toast.LENGTH_SHORT).show();
                    return false;
                }

                @Override
                public void onSwiped(@NonNull RecyclerView.ViewHolder viewHolder, int direction) {
                    //  noteViewModel.delete(adapter.getNoteAt(viewHolder.getAdapterPosition()));
                    Toast.makeText(view.getContext(), "Result deleted", Toast.LENGTH_SHORT).show();
                }
            });//.attachToRecyclerView(recyclerView);









                // "20200701001400 +0200"
                    SimpleDateFormat fromUser = new SimpleDateFormat("yyyyMMddHHmmSS");
                    SimpleDateFormat myFormat = new SimpleDateFormat("HH:mm");
                    String reformattedStr = myFormat.format(fromUser.parse(program.getStart()));


                  //  String currentTime = new SimpleDateFormat("HH:mm:ss", Locale.getDefault()).format(new Date());
                    String currentTime = new SimpleDateFormat("yyyyMMddHHmmSS ", Locale.getDefault()).format(new Date());
                    Log.d("moviedatabaselog", " String currentTime :"+currentTime);
                    try {
                        Date startDate = new SimpleDateFormat("yyyyMMddHHmmSS").parse(programList.get(0).getStart());
                        Log.d("moviedatabaselog", "date :"+startDate);
                        Date currentDate= new SimpleDateFormat("yyyyMMddHHmmSS").parse(currentTime);
                        Log.d("moviedatabaselog", "   Date currentDate :"+currentDate);
                        Log.d("moviedatabaselog", "   Date currentDate getTime :"+currentDate.getTime());
                    } catch (ParseException e) {
                        e.printStackTrace();
                    }



//original method:

public void getNearestDate(List<Date> dates, Date targetDate) {
    Date nearestDate = null;
    int index = 0;
    long prevDiff = -1;
    long targetTS = targetDate.getTime();
    for (int i = 0; i < dates.size(); i++) {
        Date date = dates.get(i);
        long currDiff = Math.abs(date.getTime() - targetTS);
        if (prevDiff == -1 || currDiff < prevDiff) {
            prevDiff = currDiff;
            nearestDate = date;
            index = i;
        }
    }
    System.out.println("Nearest Date: " + nearestDate);
    System.out.println("Index: " + index);
}